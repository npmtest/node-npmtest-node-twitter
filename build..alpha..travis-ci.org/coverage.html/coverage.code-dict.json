{"/home/travis/build/npmtest/node-npmtest-node-twitter/test.js":"/* istanbul instrument in package npmtest_node_twitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-twitter/lib.npmtest_node_twitter.js":"/* istanbul instrument in package npmtest_node_twitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_twitter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_twitter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-twitter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-twitter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_twitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_twitter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_twitter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_twitter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_twitter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_twitter.__dirname + '/lib.npmtest_node_twitter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-twitter/node_modules/node-twitter/lib/Twitter.js":"module.exports = {\n    RestClient: require('./RestClient'),\n    SearchClient: require('./SearchClient'),\n    StreamClient: require('./StreamClient')\n};\n","/home/travis/build/npmtest/node-npmtest-node-twitter/node_modules/node-twitter/lib/RestClient.js":"var Util = require('util');\nvar Client = require('./Client');\nvar Constants = require('./Constants');\nvar RestParameterValidator = require('./RestParameterValidator');\nvar UploadClient = require('./UploadClient');\n\n/**\n * Creates an instance of RestClient.\n *\n * @constructor\n * @this {RestClient}\n * @param {String} consumerKey OAuth consumer key.\n * @param {String} consumerSecret OAuth consumer secret.\n * @param {String} token OAuth token.\n * @param {String} tokenSecret OAuth token secret.\n */\nvar RestClient = function(consumerKey, consumerSecret, token, tokenSecret)\n{\n    Client.call(this, consumerKey, consumerSecret, token, tokenSecret);\n\n    this._apiBaseUrlString = Constants.RestApiBaseURLString;\n    this._apiVersion = Constants.RestApiVersion;\n    this._format = 'json';\n    this._validator = new RestParameterValidator();\n};\n\nUtil.inherits(RestClient, Client);\n\n// Direct Messages\n\n/**\n * Returns the 20 most recent direct messages sent to the authenticated user.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/direct_messages\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param parameters\n * @param callback The callback function.\n */\nRestClient.prototype.directMessages = function(parameters, callback)\n{\n    this._validator.validateCount(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateMaxId(parameters);\n    this._validator.validatePage(parameters);\n    this._validator.validateSinceId(parameters);\n    this._validator.validateSkipStatus(parameters);\n\n    this._createGetRequest('direct_messages', this._format, parameters, callback);\n}\n\n/**\n * Destroys the specified direct message.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/post/direct_messages/destroy/%3Aid\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param parameters\n * @param callback The callback function.\n */\nRestClient.prototype.directMessagesDestroy = function(parameters, callback)\n{\n    var id = parameters['id'];\n    if (id === undefined)\n    {\n        throw new Error('Missing required parameter: id.');\n    }\n\n    this._validator.validateId(parameters);\n    this._validator.validateIncludeEntities(parameters);\n\n    var resource = 'direct_messages/destroy/' + id;\n\n    // Remove the id key from the list of query parameters.\n    delete(parameters['id']);\n\n    this._createPostRequest(resource, this._format, parameters, callback);\n}\n\n/**\n * Returns the 20 most recent direct messages sent by the authenticated user.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/direct_messages/sent\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param parameters\n * @param callback The callback function.\n */\nRestClient.prototype.directMessagesSent = function(parameters, callback)\n{\n    this._validator.validateCount(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateMaxId(parameters);\n    this._validator.validatePage(parameters);\n    this._validator.validateSinceId(parameters);\n\n    this._createGetRequest('direct_messages/sent', this._format, parameters, callback);\n}\n\n/**\n * Sends a direct message to a to a follower of the authenticated user.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1.1/post/direct_messages/new\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param parameters\n * @param callback The callback function.\n */\nRestClient.prototype.directMessagesNew = function(parameters, callback)\n{\n    this._validator.validateUserId(parameters);\n    this._validator.validateScreenName(parameters);\n    this._validator.validateText(parameters);\n\n    this._createPostRequest('direct_messages/new', this._format, parameters, callback);\n}\n\n// Friends & Followers\n\n\n/**\n * Returns an array of numeric IDs for every user friend of the specified user.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/friends/ids\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param parameters\n * @param callback The callback function.\n */\nRestClient.prototype.friendsIds = function(parameters, callback)\n{\n    this._validator.validateScreenName(parameters);\n    this._validator.validateUserId(parameters);\n\n    // To work around JavaScript's inability to handle large numbers \n    // indicate IDs should be returned as strings\n    parameters['stringify_ids'] = true;\n\n    this._createGetRequest('friends/ids', this._format, parameters, callback);\n}\n\n/**\n * Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their “friends”).\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/friends/list\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param parameters\n * @param callback The callback function.\n */\nRestClient.prototype.friendsList = function(parameters, callback)\n{\n    this._validator.validateScreenName(parameters);\n    this._validator.validateUserId(parameters);\n\n    // To work around JavaScript's inability to handle large numbers \n    // indicate IDs should be returned as strings\n    parameters['stringify_ids'] = true;\n\n    this._createGetRequest('friends/list', this._format, parameters, callback);\n}\n\n/**\n * Returns an array of numeric IDs for every user following the specified user.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/followers/ids\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param parameters\n * @param callback The callback function.\n */\nRestClient.prototype.followersIds = function(parameters, callback)\n{\n    var screenName = parameters['screen_name'];\n    var userId = parameters['user_id'];\n    if (screenName === undefined && userId === undefined)\n    {\n        throw new Error('Missing required parameter: screen_name or user_id.');\n    }\n\n    this._validator.validateScreenName(parameters);\n    this._validator.validateUserId(parameters);\n\n    // To work around JavaScript's inability to handle large numbers \n    // indicate IDs should be returned as strings\n    parameters['stringify_ids'] = true;\n\n    this._createGetRequest('followers/ids', this._format, parameters, callback);\n}\n\n// User Favorites\n\n/**\n * Returns an array of tweet objects that were favorited by the specified user\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/followers/ids\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param parameters\n * @param callback The callback function.\n */\nRestClient.prototype.userFavorites = function(parameters, callback)\n{\n    var screenName = parameters['screen_name'];\n    var userId = parameters['user_id'];\n    if (screenName === undefined && userId === undefined)\n    {\n        throw new Error('Missing required parameter: screen_name or user_id.');\n    }\n\n    this._validator.validateScreenName(parameters);\n    this._validator.validateUserId(parameters);\n\n    // To work around JavaScript's inability to handle large numbers \n    // indicate IDs should be returned as strings\n    parameters['stringify_ids'] = true;\n\n    this._createGetRequest('favorites/list', this._format, parameters, callback);\n}\n\n\n// Timelines\n//\n// Timelines are collections of Tweets, ordered with the most recent first.\n\n/**\n * Returns the 20 most recent tweets (including retweets), posted by the authenticated user and the user they follow.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/home_timeline\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesHomeTimeline = function(parameters, callback)\n{\n    this._validator.validateContributorDetails(parameters);\n    this._validator.validateCount(parameters);\n    this._validator.validateExcludeReplies(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateIncludeRetweets(parameters);\n    this._validator.validateMaxId(parameters);\n    this._validator.validatePage(parameters);\n    this._validator.validateSinceId(parameters);\n    this._validator.validateTrimUser(parameters);\n\n\tthis._createGetRequest('statuses/home_timeline', this._format, parameters, callback);\n};\n\n/**\n * Retrieves the most recent mentions for the authenticated user.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/mentions\">Twitter documentation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesMentions = function(parameters, callback)\n{\n    this._validator.validateContributorDetails(parameters);\n    this._validator.validateCount(parameters);\n    this._validator.validateExcludeReplies(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateIncludeRetweets(parameters);\n    this._validator.validateMaxId(parameters);\n    this._validator.validatePage(parameters);\n    this._validator.validateSinceId(parameters);\n    this._validator.validateTrimUser(parameters);\n\n    this._createGetRequest('statuses/mentions', this._format, parameters, callback);\n};\n\n/**\n * Retrieves the most recent statuses, including retweets if they exist, from non-protected users.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/public_timeline\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesPublicTimeline = function(parameters, callback)\n{\n    this._validator.validateCount(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateTrimUser(parameters);\n\n    this._createGetRequest('statuses/public_timeline', this._format, parameters, callback);\n};\n\n/**\n * Retrieves the most recent statuses retweeted by the authenticated user.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/retweeted_by_me\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesRetweetedByMe = function(parameters, callback)\n{\n    this._validator.validateCount(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateMaxId(parameters);\n    this._validator.validatePage(parameters);\n    this._validator.validateSinceId(parameters);\n    this._validator.validateTrimUser(parameters);\n\n    this._createGetRequest('statuses/retweeted_by_me', this._format, parameters, callback);\n};\n\n/**\n * Retrieves the most recent retweets posted by the specified user.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/retweeted_by_user\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesRetweetedByUser = function(parameters, callback)\n{\n    this._validator.validateCount(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateMaxId(parameters);\n    this._validator.validatePage(parameters);\n    this._validator.validateScreenName(parameters);\n    this._validator.validateSinceId(parameters);\n    this._validator.validateTrimUser(parameters);\n    this._validator.validateUserId(parameters);\n\n    this._createGetRequest('statuses/retweeted_by_user', this._format, parameters, callback);\n};\n\n/**\n * Retrieves the most recent retweets posted by users the authenticated user follows.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/retweeted_to_me\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesRetweetedToMe = function(parameters, callback)\n{\n    this._validator.validateCount(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateMaxId(parameters);\n    this._validator.validatePage(parameters);\n    this._validator.validateSinceId(parameters);\n    this._validator.validateTrimUser(parameters);\n\n    this._createGetRequest('statuses/retweeted_to_me', this._format, parameters, callback);\n};\n\n/**\n * Retrieves the most recent retweets posted by users the specified user follows.\n * This method is identical to statusesRetweetedToMe except you can specify the user.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/retweeted_to_user\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesRetweetedToUser = function(parameters, callback)\n{\n    this._validator.validateCount(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateMaxId(parameters);\n    this._validator.validatePage(parameters);\n    this._validator.validateScreenName(parameters);\n    this._validator.validateSinceId(parameters);\n    this._validator.validateTrimUser(parameters);\n    this._validator.validateUserId(parameters);\n\n    this._createGetRequest('statuses/retweeted_to_user', this._format, parameters, callback);\n};\n\n/**\n * Returns recent tweets by the authenticated user that have been retweeted by others.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/retweets_of_me\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesRetweetsOfMe = function(parameters, callback)\n{\n    this._validator.validateCount(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateMaxId(parameters);\n    this._validator.validatePage(parameters);\n    this._validator.validateSinceId(parameters);\n    this._validator.validateTrimUser(parameters);\n\n    this._createGetRequest('statuses/retweets_of_me', this._format, parameters, callback);\n};\n\n/**\n *\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/user_timeline\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesUserTimeline = function(parameters, callback)\n{\n    this._validator.validateContributorDetails(parameters);\n    this._validator.validateCount(parameters);\n    this._validator.validateExcludeReplies(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateIncludeRetweets(parameters);\n    this._validator.validateMaxId(parameters);\n    this._validator.validatePage(parameters);\n    this._validator.validateSinceId(parameters);\n    this._validator.validateScreenName(parameters);\n    this._validator.validateTrimUser(parameters);\n    this._validator.validateUserId(parameters);\n\n    this._createGetRequest('statuses/user_timeline', this._format, parameters, callback);\n};\n\n// Tweets\n\n/**\n * Destroys the status specified by the id parameter if it is owned by the authenticated user.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/post/statuses/destroy/%3Aid\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesDestroy = function(parameters, callback)\n{\n    var id = parameters['id'];\n    if (id === undefined)\n    {\n        throw new Error('Missing required parameter: id.');\n    }\n\n    this._validator.validateId(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateTrimUser(parameters);\n\n    var resource = 'statuses/destroy/' + id;\n\n    // Remove the id key from the list of query parameters.\n    delete(parameters['id']);\n\n    this._createPostRequest(resource, this._format, parameters, callback);\n};\n\n/**\n * Retrieves information needed to embed a status on third party sites.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/oembed\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesOEmbed = function(parameters, callback)\n{\n    var id = parameters['id'];\n    if (id === undefined)\n    {\n        var url = parameters['url'];\n        if (url === undefined)\n        {\n            throw new Error('Missing required parameter: id or url.');\n        }\n    }\n\n    this._validator.validateId(parameters);\n    this._validator.validateUrl(parameters);\n\n    this._validator.validateAlign(parameters);\n    this._validator.validateHideMedia(parameters);\n    this._validator.validateHideThread(parameters);\n    this._validator.validateLanguage(parameters);\n    this._validator.validateMaxWidth(parameters);\n    this._validator.validateOmitScript(parameters);\n    this._validator.validateRelated(parameters);\n\n    var resource = 'statuses/oembed';\n\n    this._createGetRequest(resource, this._format, parameters, callback);\n};\n\n/**\n * Retweets the status associated with the specified id parameter.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/post/statuses/retweet/%3Aid\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesRetweet = function(parameters, callback)\n{\n    var id = parameters['id'];\n    if (id === undefined)\n    {\n        throw new Error('Missing required parameter: id.');\n    }\n\n    this._validator.validateId(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateCount(parameters);\n    this._validator.validatePage(parameters);\n    this._validator.validateTrimUser(parameters);\n\n    var resource = 'statuses/retweet/' + id;\n\n    // Remove the id key from the list of query parameters.\n    delete(parameters['id']);\n\n    this._createPostRequest(resource, this._format, parameters, callback);\n};\n\n/**\n * Retrieves the users who retweeted the status associated with the specified id parameter.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/%3Aid/retweeted_by\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesRetweetedBy = function(parameters, callback)\n{\n    var id = parameters['id'];\n    if (id === undefined)\n    {\n        throw new Error('Missing required parameter: id.');\n    }\n\n    this._validator.validateId(parameters);\n    this._validator.validateCount(parameters);\n    this._validator.validatePage(parameters);\n\n    var resource = 'statuses/' + id + '/retweeted_by';\n\n    // Remove the id key from the list of query parameters.\n    delete(parameters['id']);\n\n    this._createGetRequest(resource, this._format, parameters, callback);\n};\n\n/**\n * Retrieves the ids of the users who retweeted the status associated with the specified id parameter.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/%3Aid/retweeted_by/ids\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesRetweetedByIds = function(parameters, callback)\n{\n    var id = parameters['id'];\n    if (id === undefined)\n    {\n        throw new Error('Missing required parameter: id.');\n    }\n\n    this._validator.validateId(parameters);\n    this._validator.validateCount(parameters);\n    this._validator.validatePage(parameters);\n    this._validator.validateStringifyIds(parameters);\n\n    var resource = 'statuses/' + id + '/retweeted_by/ids';\n\n    // Remove the id key from the list of query parameters.\n    delete(parameters['id']);\n\n    // To work around JavaScript's inability to handle large numbers \n    // indicate IDs should be returned as strings\n    parameters['stringify_ids'] = true;\n\n    this._createGetRequest(resource, this._format, parameters, callback);\n};\n\n/**\n * Retrieves the retweets of a given status.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/retweets/%3Aid\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesRetweets = function(parameters, callback)\n{\n    var id = parameters['id'];\n    if (id === undefined)\n    {\n        throw new Error('Missing required parameter: id.');\n    }\n\n    this._validator.validateId(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateCount(parameters);\n    this._validator.validatePage(parameters);\n    this._validator.validateTrimUser(parameters);\n\n    var resource = 'statuses/retweets/' + id;\n\n    // Remove the id key from the list of query parameters.\n    delete(parameters['id']);\n\n    this._createGetRequest(resource, this._format, parameters, callback);\n};\n\n/**\n * Retrieves the status associated with the specified id parameter.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/show/%3Aid\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesShow = function(parameters, callback)\n{\n    var id = parameters['id'];\n    if (id === undefined)\n    {\n        throw new Error('Missing required parameter: id.');\n    }\n\n    this._validator.validateId(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateTrimUser(parameters);\n\n    var resource = 'statuses/show';\n\n    this._createGetRequest(resource, this._format, parameters, callback);\n};\n\n/**\n * Posts a new status for the authenticated user.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/post/statuses/update\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n * @return This method returns an integer.\n */\nRestClient.prototype.statusesUpdate = function(parameters, callback)\n{\n    var status = parameters['status'];\n    if (status === undefined)\n    {\n        throw new Error('Missing required parameter: status.');\n    }\n\n    this._validator.validateDisplayCoordinates(parameters);\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateInReplyToStatusId(parameters);\n    this._validator.validatePlaceId(parameters);\n    this._validator.validateLatitude(parameters);\n    this._validator.validateLongitude(parameters);\n    this._validator.validateStatus(parameters);\n    this._validator.validateTrimUser(parameters);\n\n    var resource = 'statuses/update';\n\n    this._createPostRequest(resource, this._format, parameters, callback);\n};\n\n/**\n * Posts a new status for the authenticated user and attaches media for upload.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/post/statuses/update_with_media\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nRestClient.prototype.statusesUpdateWithMedia = function(parameters, callback)\n{\n    var uploadClient = new UploadClient(\n        this._oauth.consumer_key,\n        this._oauth.consumer_secret,\n        this._oauth.token,\n        this._oauth.token_secret\n    );\n\n    uploadClient.statusesUpdateWithMedia(parameters, callback);\n};\n\n// Users\n\n/**\n * Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. \n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/users/lookup\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param parameters\n * @param callback The callback function.\n */\nRestClient.prototype.usersLookup = function(parameters, callback)\n{\n    this._validator.validateIncludeEntities(parameters);\n    this._validator.validateScreenName(parameters);\n    this._validator.validateUserId(parameters);\n\n    this._createGetRequest('users/lookup', this._format, parameters, callback);\n}\n\n// Application\n\n/**\n * Returns the current rate limits for methods belonging to the specified resource families.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/rest/reference/get/application/rate_limit_status\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param parameters - resources (optional) A comma-separated list of resource families you want to know the current rate limit disposition for. For best performance, only specify the resource families pertinent to your application.  Example Values: statuses,friends,trends,help\n * @param callback The callback function.\n */\nRestClient.prototype.applicationRateLimitStatus = function(parameters, callback)\n{\n    this._createGetRequest('application/rate_limit_status', this._format, parameters, callback);\n}\n\n\nmodule.exports = RestClient;\n","/home/travis/build/npmtest/node-npmtest-node-twitter/node_modules/node-twitter/lib/Client.js":"var Crypto = require('crypto');\nvar Events = require('events');\nvar request = require('request');\nvar QueryString = require('querystring');\nvar Util = require('util');\n\n/**\n * Creates an instance of Client.\n *\n * @constructor\n * @this {Client}\n * @param {String} consumerKey The OAuth consumer key.\n * @param {String} consumerSecret The OAuth consumer secret.\n * @param {String} token The OAuth token.\n * @param {String} tokenSecret The OAuth token secret.\n */\nvar Client = function(consumerKey, consumerSecret, token, tokenSecret)\n{\n    Events.EventEmitter.call(this);\n\n    /** @private */\n    this._apiBaseUrlString = null;\n    /** @private */\n    this._apiVersion = null;\n    /** @private */\n    this._oauth = {\n        consumer_key: consumerKey,\n        consumer_secret: consumerSecret,\n        token: token,\n        token_secret: tokenSecret\n    };\n    /** @private */\n    this._connections = {};\n};\n\nUtil.inherits(Client, Events.EventEmitter);\n\n/**\n * Returns the OAuth credentials.\n *\n * @this {Client}\n * @return {Dictionary} The OAuth credentials.\n */\nClient.prototype.oauth = function()\n{\n    return this._oauth;\n}\n\n/**\n * Returns the connection object associated with the specified key.\n *\n * @private\n * @this {Client}\n * @param {String} aKey\n * @return The connection object or undefined.\n */\nClient.prototype._connectionForKey = function(aKey)\n{\n    return this._connections[aKey];\n};\n\n/**\n * Creates an HTTP GET request.\n *\n * @private\n * @this {Client}\n * @param {String} resource The resource to call.\n * @param {String} format The format in which to return data.\n * @param {Dictionary} parameters Parameters required to access the resource.\n * @param {Function} callback The callback function.\n */\nClient.prototype._createGetRequest = function(resource, format, parameters, callback)\n{\n    var self = this;\n\n    var requestUrlString = this._apiBaseUrlString + '/';\n    if (this._apiVersion !== null)\n    {\n        requestUrlString += this._apiVersion + '/';\n    }\n    requestUrlString += resource + '.' + format;\n\n    var requestQueryString = QueryString.stringify(parameters);\n    if (requestQueryString !== undefined && requestQueryString !== null && requestQueryString.length > 0)\n    {\n        requestUrlString = requestUrlString + '?' + requestQueryString;\n    }\n\n    var requestOptions = {method: 'GET', url: requestUrlString, oauth: this.oauth()};\n\n    var httpRequest = request.get(requestOptions);\n    httpRequest.hash = Crypto.createHash('sha1').update(JSON.stringify(httpRequest.headers), 'utf8').digest('hex');\n    this._connections[httpRequest.hash] = {callback: callback, data: '', httpRequest: httpRequest};\n\n\n    this._createEventListenersForRequest(httpRequest);\n};\n\n/**\n * Creates an HTTP POST request.\n *\n * @private\n * @this {Client}\n * @param {String} resource The Twitter API resource to call.\n * @param {String} format The format in which to return data.\n * @param {Dictionary} parameters Parameters required to access the resource.\n * @param {Function} callback The callback function.\n */\nClient.prototype._createPostRequest = function(resource, format, parameters, callback)\n{\n    var self = this;\n\n    var requestUrlString = this._apiBaseUrlString + '/';\n    if (this._apiVersion !== null)\n    {\n        requestUrlString += this._apiVersion + '/';\n    }\n    requestUrlString += resource + '.' + format;\n\n    var requestOptions = {method: 'POST', url: requestUrlString, oauth: this.oauth(), form: parameters};\n\n    var httpRequest = request.post(requestOptions);\n    httpRequest.hash = Crypto.createHash('sha1').update(JSON.stringify(httpRequest.headers), 'utf8').digest('hex');\n    this._connections[httpRequest.hash] = {callback: callback, data: '', httpRequest: httpRequest};\n\n    this._createEventListenersForRequest(httpRequest);\n};\n\n/**\n * Creates listeners that respond to events triggered by the specified\n * request object.\n *\n * @private\n * @this {Client}\n * @param {http.ClientRequest} aRequest The request object.\n */\nClient.prototype._createEventListenersForRequest = function(aRequest)\n{\n    var self = this;\n\n    aRequest.on('close', function() {\n        self._requestDidClose(aRequest);\n    });\n\n    aRequest.on('data', function(data) {\n        self._requestDidReceiveData(aRequest, data);\n    });\n\n    aRequest.on('end', function() {\n        self._requestDidEnd(aRequest);\n    });\n\n    aRequest.on('error', function(error) {\n        self._requestDidFailWithError(aRequest, error);\n    });\n\n    aRequest.on('response', function(aResponse) {\n        self._requestDidReceiveResponse(aRequest, aResponse);\n    });\n};\n\n/**\n * Removes the connection object associated with the specified key.\n *\n * @private\n * @this {Client}\n * @param {String} aKey\n */\nClient.prototype._removeConnectionForKey = function(aKey)\n{\n    if (this._connectionForKey(aKey) !== undefined)\n    {\n        delete this._connections[aKey];\n    }\n};\n\n/**\n * Handles the closing of a request.\n *\n * @private\n * @this {StreamClient}\n * @param {http.ClientRequest} aRequest The request object.\n */\nClient.prototype._requestDidClose = function(aRequest)\n{\n    var connection = this._connectionForKey(aRequest.hash);\n    if (connection === undefined) return;\n\n    var error = undefined;\n    var result = undefined;\n    try\n    {\n        result = JSON.parse(connection.data);\n    }\n    catch (e)\n    {\n        error = e;\n        result = undefined;\n    }\n\n    if (connection.callback instanceof Function)\n    {\n        connection.callback(error, result);\n    }\n\n    this._removeConnectionForKey(aRequest.hash);\n};\n\n/**\n * Handles the ending of a request.\n *\n * @private\n * @this {StreamClient}\n * @param {http.ClientRequest} aRequest The request object.\n */\nClient.prototype._requestDidEnd = function(aRequest)\n{\n    var connection = this._connectionForKey(aRequest.hash);\n    if (connection === undefined) return;\n\n    var error = undefined;\n    var result = undefined;\n    try\n    {\n        result = JSON.parse(connection.data);\n    }\n    catch (e)\n    {\n        error = e;\n        result = undefined;\n    }\n\n    if (connection.callback instanceof Function)\n    {\n        connection.callback(error, result);\n    }\n\n    this._removeConnectionForKey(aRequest.hash);\n};\n\n/**\n * Handles the failure of a request.\n *\n * @private\n * @this {StreamClient}\n * @param {http.ClientRequest} aRequest The request object.\n * @param {Error} aError An Error object.\n */\nClient.prototype._requestDidFailWithError = function(aRequest, aError)\n{\n    var connection = this._connectionForKey(aRequest.hash);\n    if (connection === undefined) return;\n\n    if (connection.callback instanceof Function)\n    {\n        connection.callback(aError, undefined);\n    }\n\n    this._removeConnectionForKey(aRequest.hash);\n};\n\n/**\n * Handles data received from the server.\n *\n * @private\n * @this {StreamClient}\n * @param {http.ClientRequest} aRequest The request object.\n * @param {Buffer} aData\n */\nClient.prototype._requestDidReceiveData = function(aRequest, aData)\n{\n    var connection = this._connectionForKey(aRequest.hash);\n    if (connection === undefined) return;\n\n    var receivedData = connection['data'] + aData.toString('utf8');\n    connection['data'] = receivedData;\n};\n\n/**\n * Handles a response by the server.\n *\n * @private\n * @this {StreamClient}\n * @param {http.ClientRequest} aRequest The request object.\n * @param {http.ClientResponse} aResponse The response object.\n */\nClient.prototype._requestDidReceiveResponse = function(aRequest, aResponse)\n{\n    var connection = this._connectionForKey(aRequest.hash);\n    var hasError = false;\n    if (connection !== undefined)\n    {\n        connection['data'] = '';\n    }\n\n    // Error handling for status codes documented at\n    // https://dev.twitter.com/docs/error-codes-responses\n    var error = null;\n    if (aResponse.statusCode !== 200)\n    {\n      error = new Error();\n      error.code = aResponse.statusCode;\n    }\n\n    switch(aResponse.statusCode)\n    {\n        case 304:\n            error.message = 'Not Modified.';\n            break;\n        case 400:\n            error.message = 'Bad Request';\n            break;\n        case 401:\n            error.message = 'Unauthorized';\n            break;\n        case 403:\n            error.message = 'Forbidden';\n            break;\n        case 404:\n            error.message = 'Not Found';\n            break;\n        case 429:\n            error.message = 'Too Many Requests';\n            break;\n        case 406:\n            error.message = 'Not Acceptable';\n            break;\n        case 420:\n            error.message = 'Enhance Your Calm';\n            break;\n        case 500:\n            error.message = 'Internal Server Error';\n            break;\n        case 502:\n            error.message = 'Bad Gateway';\n            break;\n        case 503:\n            error.message = 'Service Unavailable';\n            break;\n    }\n\n    if (error !== null)\n    {\n        this._requestDidFailWithError(aRequest, error);\n\n        return;\n    }\n};\n\nmodule.exports = Client;\n","/home/travis/build/npmtest/node-npmtest-node-twitter/node_modules/node-twitter/lib/Constants.js":"module.exports = {\n    OAuthAccessTokenURLString: 'https://api.twitter.com/oauth/access_token',\n    OAuthRequestTokenURLString: 'https://api.twitter.com/oauth/request_token',\n    OAuthSignatureMethod: 'HMAC-SHA1',\n    OAuthVersion: '1.0A',\n    RestApiBaseURLString: 'https://api.twitter.com',\n    RestApiVersion: '1.1',\n    StreamApiBaseURLString: 'https://stream.twitter.com',\n    StreamApiObjectTerminator: '\\r\\n',\n    StreamApiVersion: '1.1',\n    UploadApiBaseURLString: 'https://api.twitter.com',\n    UploadApiVersion: '1.1',\n    WebsiteBaseURLString: 'http://www.twitter.com',\n    WebServiceAPIVersion: '1.1',\n    WebServiceLocaleIdentifier: 'en_US'\n};\n","/home/travis/build/npmtest/node-npmtest-node-twitter/node_modules/node-twitter/lib/RestParameterValidator.js":"var fs = require('fs');\nvar path = require('path');\nvar Util = require('util');\n\n// Support node.js 0.8.0 while maintaing backwards compatibility with\n// previous versions.\nfs.exists || (fs.exists = path.exists);\nfs.existsSync || (fs.existsSync = path.existsSync);\n\n/**\n * Creates an instance of RestParameterValidator.\n *\n * @constructor\n * @this {RestParameterValidator}\n */\nvar RestParameterValidator = function()\n{\n    Object.call(this);\n};\n\nUtil.inherits(RestParameterValidator, Object);\n\nRestParameterValidator.prototype.validateAlign = function(parameters)\n{\n    var type = 'string';\n    var align = parameters['align'];\n    if (align !== undefined && typeof align !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateContributorDetails = function(parameters)\n{\n\tvar contributorDetails = parameters['contributor_details'];\n    if (contributorDetails !== undefined && typeof contributorDetails !== 'boolean')\n    {\n        throw new Error('Expected boolean.');\n    }\n};\n\nRestParameterValidator.prototype.validateCount = function(parameters)\n{\n    var count = parameters['count'];\n    if (count !== undefined && typeof count !== 'number')\n    {\n        throw new Error('Expected number.');\n    }\n};\n\nRestParameterValidator.prototype.validateDisplayCoordinates = function(parameters)\n{\n    var type = 'boolean';\n    var displayCoordinates = parameters['display_coordinates'];\n    if (displayCoordinates !== undefined && typeof displayCoordinates !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateExcludeReplies = function(parameters)\n{\n    var excludeReplies = parameters['exclude_replies'];\n    if (excludeReplies !== undefined && typeof excludeReplies !== 'boolean')\n    {\n        throw new Error('Expected boolean.');\n    }\n};\n\nRestParameterValidator.prototype.validateId = function(parameters)\n{\n    var type = 'string';\n    var statusId = parameters['id'];\n    if (statusId !== undefined && typeof statusId !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateIncludeEntities = function(parameters)\n{\n    var includeEntities = parameters['include_entities'];\n    if (includeEntities !== undefined && typeof includeEntities !== 'boolean')\n    {\n        throw new Error('Expected boolean.');\n    }\n};\n\nRestParameterValidator.prototype.validateIncludeRetweets = function(parameters)\n{\n    var includeRetweets = parameters['include_rts'];\n    if (includeRetweets !== undefined && typeof includeRetweets !== 'boolean')\n    {\n        throw new Error('Expected boolean.');\n    }\n};\n\nRestParameterValidator.prototype.validateInReplyToStatusId = function(parameters)\n{\n    var type = 'string';\n    var inReplyToStatusId = parameters['in_reply_to_status_id'];\n    if (inReplyToStatusId !== undefined && typeof inReplyToStatusId !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateHideMedia = function(parameters)\n{\n    var type = 'boolean';\n    var hideMedia = parameters['hide_media'];\n    if (hideMedia !== undefined && typeof hideMedia !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateHideThread = function(parameters)\n{\n    var type = 'boolean';\n    var hideThread = parameters['hide_thread'];\n    if (hideThread !== undefined && typeof hideThread !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateMaxId = function(parameters)\n{\n    var maxId = parameters['max_id'];\n    if (maxId !== undefined && typeof maxId !== 'number')\n    {\n        throw new Error('Expected number.');\n    }\n};\n\nRestParameterValidator.prototype.validateMaxWidth = function(parameters)\n{\n    var type = 'number';\n    var maxWidth = parameters['maxwidth'];\n    if (maxWidth !== undefined && typeof maxWidth !== type)\n    {\n        throw new Error('Expected ' + type+ '.');\n    }\n};\n\nRestParameterValidator.prototype.validateLanguage = function(parameters)\n{\n    var type = 'string';\n    var language = parameters['lang'];\n    if (language !== undefined && typeof language !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateLatitude = function(parameters)\n{\n    var type = 'number';\n    var latitude = parameters['lat'];\n    if (latitude !== undefined && typeof latitude !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateLongitude = function(parameters)\n{\n    var type = 'number';\n    var longitude = parameters['long'];\n    if (longitude !== undefined && typeof longitude !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateOmitScript = function(parameters)\n{\n    var type = 'boolean';\n    var omitScript = parameters['omit_script'];\n    if (omitScript !== undefined && typeof omitScript !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validatePage = function(parameters)\n{\n    var page = parameters['page'];\n    if (page !== undefined && typeof page !== 'number')\n    {\n        throw new Error('Expected number.');\n    }\n};\n\nRestParameterValidator.prototype.validatePlaceId = function(parameters)\n{\n    var type = 'string';\n    var placeId = parameters['place_id'];\n    if (placeId !== undefined && typeof placeId !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validatePossiblySensitive = function(parameters)\n{\n    var type = 'boolean';\n    var possiblySensitive = parameters['possibly_sensitive'];\n    if (possiblySensitive !== undefined && typeof possiblySensitive !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateMedia = function(parameters)\n{\n    var type = 'string';\n    var media = parameters['media[]'];\n    if (media !== undefined && typeof media !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n\n    media = path.normalize(media);\n    if (fs.existsSync(media) === false)\n    {\n        throw new Error('File path does not exist: ' + media);\n    }\n};\n\nRestParameterValidator.prototype.validateRelated = function(parameters)\n{\n    var type = 'string';\n    var related = parameters['related'];\n    if (related !== undefined && typeof related !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateSinceId = function(parameters)\n{\n    var sinceId = parameters['since_id'];\n    if (sinceId !== undefined && typeof sinceId !== 'number')\n    {\n        throw new Error('Expected number.');\n    }\n};\n\nRestParameterValidator.prototype.validateScreenName = function(parameters)\n{\n    var screenName = parameters['screen_name'];\n    if (screenName !== undefined && typeof screenName !== 'string')\n    {\n        throw new Error('Expected boolean.');\n    }\n};\n\nRestParameterValidator.prototype.validateStatus = function(parameters)\n{\n    var type = 'string';\n    var status = parameters['status'];\n    if (status !== undefined && typeof status !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateSkipStatus = function(parameters)\n{\n    var type = 'boolean';\n    var skipStatus = parameters['skip_status'];\n    if (skipStatus !== undefined && typeof skipStatus !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateStringifyIds = function(parameters)\n{\n    var type = 'boolean';\n    var statusId = parameters['stringify_ids'];\n    if (statusId !== undefined && typeof statusId !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateText = function(parameters)\n{\n    var text = parameters['text'];\n    if (typeof text !== 'string')\n    {\n        throw new Error('Expected string.');\n    }\n};\n\nRestParameterValidator.prototype.validateTrimUser = function(parameters)\n{\n    var trimUser = parameters['trim_user'];\n    if (trimUser !== undefined && typeof trimUser !== 'boolean')\n    {\n        throw new Error('Expected boolean.');\n    }\n};\n\nRestParameterValidator.prototype.validateUrl = function(parameters)\n{\n    var type = 'string';\n    var url = parameters['url'];\n    if (url !== undefined && typeof url !== type)\n    {\n        throw new Error('Expected ' + type + '.');\n    }\n};\n\nRestParameterValidator.prototype.validateUserId = function(parameters)\n{\n    var userId = parameters['user_id'];\n    var types = {'number': true, 'string': true};\n    if (userId !== undefined && types[(typeof userId)] === false)\n    {\n        throw new Error('Expected number.');\n    }\n};\n\nmodule.exports = RestParameterValidator;\n","/home/travis/build/npmtest/node-npmtest-node-twitter/node_modules/node-twitter/lib/UploadClient.js":"var Crypto = require('crypto');\nvar fs = require('fs');\nvar path = require('path');\nvar Util = require('util');\nvar Client = require('./Client');\nvar Constants = require('./Constants');\nvar RestParameterValidator = require('./RestParameterValidator');\nvar request = require('request');\n\n/**\n * Creates an instance of UploadClient.\n *\n * @constructor\n * @this {UploadClient}\n * @param {String} consumerKey OAuth consumer key.\n * @param {String} consumerSecret OAuth consumer secret.\n * @param {String} token OAuth token.\n * @param {String} tokenSecret OAuth token secret.\n */\nvar UploadClient = function(consumerKey, consumerSecret, token, tokenSecret)\n{\n    Client.call(this, consumerKey, consumerSecret, token, tokenSecret);\n\n    this._apiBaseUrlString = Constants.UploadApiBaseURLString;\n    this._apiVersion = Constants.UploadApiVersion;\n    this._validator = new RestParameterValidator();\n};\n\nUtil.inherits(UploadClient, Client);\n\n/**\n *\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/post/statuses/update_with_media\">Twitter documenation</a>.\n *\n * @this {UploadClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nUploadClient.prototype.statusesUpdateWithMedia = function(parameters, callback)\n{\n    var status = parameters['status'];\n    if (status === undefined)\n    {\n        throw new Error('Missing required parameter: status.');\n    }\n\n    var media = parameters['media[]'];\n    if (media === undefined)\n    {\n        throw new Error('Missing required parameter: media[].');\n    }\n\n    this._validator.validateDisplayCoordinates(parameters);\n    this._validator.validateInReplyToStatusId(parameters);\n    this._validator.validatePlaceId(parameters);\n    this._validator.validatePossiblySensitive(parameters);\n    this._validator.validateLatitude(parameters);\n    this._validator.validateLongitude(parameters);\n    this._validator.validateMedia(parameters);\n    this._validator.validateStatus(parameters);\n\n    var resource = 'statuses/update_with_media';\n\n    this._createPostRequest(resource, 'json', parameters, callback);\n};\n\n/**\n * Creates an HTTP POST request.\n *\n * @private\n * @this {Client}\n * @param {String} resource The Twitter API resource to call.\n * @param {String} format The format in which to return data.\n * @param {Dictionary} parameters Parameters required to access the resource.\n * @param {Function} callback The callback function.\n */\nUploadClient.prototype._createPostRequest = function(resource, format, parameters, callback)\n{\n\tvar MEDIA_KEY = 'media[]';\n\n\t// Multipart data for non-media parameters\n    var multipartItems = Object.keys(parameters).filter(function (key) {\n\t\treturn key != MEDIA_KEY;\n\t}).map(function (key) {\n\t\treturn {\n\t\t\t'content-disposition': 'form-data; name=\"' + key + '\"',\n\t\t\t'content-type': 'text/plain',\n\t\t\t'body': parameters[key]\n\t\t};\n\t});\n\n\t// Multipart data for media[]\n    var mediaFilePath = path.normalize(parameters[MEDIA_KEY]);\n    var mediaFileExtensionName = path.extname(mediaFilePath);\n    var mimeType = this._mimeTypeForPathExtension(mediaFileExtensionName);\n    if (mimeType === null)\n    {\n        throw new Error('Unsupported media type.');\n    }\n\tvar multipartItem = {\n\t\t'content-disposition': 'form-data; name=\"' + MEDIA_KEY + '\"',\n\t\t'content-type': mimeType,\n\t\t'content-transfer-encoding': 'utf8',\n\t\t'body': null\n\t};\n\tmultipartItems.push(multipartItem);\n\n\t// Prepare request options\n    var requestUrlString = this._apiBaseUrlString + '/' + this._apiVersion +\n\t\t'/' + resource + '.' + format;\n    var requestOptions = {\n        headers: { 'content-type': 'multipart/form-data' },\n        method: 'POST',\n        url: requestUrlString,\n        oauth: this.oauth(),\n        multipart: multipartItems\n    };\n\n\t// Asynchronously read the media file and post the request\n    var self = this;\n\tfs.readFile(mediaFilePath, function (err, data) {\n\t\tif (err) {\n\t\t\tthrow err;\n\t\t} else {\n\t\t\tmultipartItem.body = data;\n\t\t}\n\n\t\tvar httpRequest = request.post(requestOptions);\n\t\thttpRequest.hash = Crypto.createHash('sha1').update(\n\t\t\tJSON.stringify(httpRequest.headers), 'utf8'\n\t\t).digest('hex');\n\t\tself._connections[httpRequest.hash] = {\n\t\t\tcallback: callback, data: '', httpRequest: httpRequest\n\t\t};\n\n\t\tself._createEventListenersForRequest(httpRequest);\n\t});\n};\n\nUploadClient.prototype._mimeTypeForPathExtension = function(pathExtension)\n{\n    var mimeType = null;\n\n    switch(pathExtension.toLowerCase())\n    {\n        case '.gif':\n            mimeType = 'image/gif';\n            break;\n        case '.jpeg':\n        case '.jpg':\n            mimeType = 'image/jpeg';\n            break;\n        case '.png':\n            mimeType = 'image/png';\n            break;\n    }\n\n    return mimeType;\n};\n\nmodule.exports = UploadClient;\n","/home/travis/build/npmtest/node-npmtest-node-twitter/node_modules/node-twitter/lib/SearchClient.js":"var Util = require('util');\nvar Client = require('./Client');\nvar Constants = require('./Constants');\n\n/**\n * Creates an instance of SearchClient.\n *\n * @constructor\n * @this {SearchClient}\n * @param {String} consumerKey OAuth consumer key.\n * @param {String} consumerSecret OAuth consumer secret.\n * @param {String} token OAuth token.\n * @param {String} tokenSecret OAuth token secret.\n */\nvar SearchClient = function(consumerKey, consumerSecret, token, tokenSecret)\n{\n    Client.call(this, consumerKey, consumerSecret, token, tokenSecret);\n\n    this._apiBaseUrlString = Constants.RestApiBaseURLString;\n    this._apiVersion = Constants.RestApiVersion;\n};\n\nUtil.inherits(SearchClient, Client);\n\n/**\n * Returns tweets that match the specified parameters.\n *\n * For information on acceptable parameters see the official <a href=\"https://dev.twitter.com/docs/api/1/get/search\">Twitter documenation</a>.\n *\n * @this {RestClient}\n * @param {Dictionary} parameters\n * @param {Function} callback The callback function.\n */\nSearchClient.prototype.search = function(parameters, callback)\n{\n    var q = parameters['q'];\n    if (q === undefined)\n    {\n        throw new Error('Missing required parameter: q.');\n    }\n\n    this._createGetRequest('search/tweets', 'json', parameters, callback);\n};\n\nmodule.exports = SearchClient;\n","/home/travis/build/npmtest/node-npmtest-node-twitter/node_modules/node-twitter/lib/StreamClient.js":"var Util = require('util');\nvar Client = require('./Client');\nvar Constants = require('./Constants');\n\n/**\n * Creates an instance of StreamClient.\n *\n * @constructor\n * @this {StreamClient}\n * @param {String} consumerKey OAuth consumer key.\n * @param {String} consumerSecret OAuth consumer secret.\n * @param {String} token OAuth token.\n * @param {String} tokenSecret OAuth token secret.\n */\nvar StreamClient = function(consumerKey, consumerSecret, token, tokenSecret)\n{\n    Client.call(this, consumerKey, consumerSecret, token, tokenSecret);\n\n    this._apiBaseUrlString = Constants.StreamApiBaseURLString;\n    this._apiVersion = Constants.StreamApiVersion;\n};\n\nUtil.inherits(StreamClient, Client);\n\n/**\n * Returns whether or not the stream client is currently running.\n *\n * @this {StreamClient}\n * @return true if the StreamClient is running; false otherwise.\n */\nStreamClient.prototype.isRunning = function()\n{\n    var self = this;\n    return Object.keys(self._connections).length >= 1;\n};\n\n/**\n * Creates an asynchronous connection to the Twitter Stream API and begins\n * listening for public statuses that match one or more filter predicates.\n *\n * Listeners should be attached to the <code>StreamClient</code> instance in\n * order to respond to events:\n *\n * <pre>\n * // Request to remove geolocation information from a status\n * twitterStreamClient.on('deleteLocation', function(data) {\n *   console.log(data);\n * });\n *\n * // Status deletion request\n * twitterStreamClient.on('deleteTweet', function(data) {\n *   console.log(data);\n * });\n *\n * // Connection to the stream has been closed\n * twitterStreamClient.on('end', function() {\n *   console.log('Connection closed.');\n * });\n *\n * // An error has occurred\n * twitterStreamClient.on('error', function(error) {\n *   console.log('Error: ' + error.code ? error.code + ' ' + error.message : error.message);\n * });\n *\n * // A retweet has been received\n * twitterStreamClient.on('retweet', function(retweet) {\n *   console.log(retweet);\n * });\n *\n * // A tweet has been received\n * twitterStreamClient.on('tweet', function(tweet) {\n *   console.log(tweet);\n * });\n * </pre>\n *\n * See <a href=\"https://dev.twitter.com/docs/streaming-api/concepts\">Twitter Streaming API Concepts</a>\n * for information on the structure of the JSON responses returned from the Twitter Streaming API.\n *\n * @this {StreamClient}\n * @param {Array} keywords A set of keywords to track.\n * @param {Array} locations A set of one or more latitude/longitude pairs defining geofences to track.\n * @param {Array} users A set of users to track.\n * @param {integer} count Number of previous statuses to deliver before transitioning to live stream delivery.\n */\nStreamClient.prototype.start = function(keywords, locations, users, count, callback)\n{\n    if (this.isRunning() === true)\n    {\n        throw new Error('StreamClient is currently running.');\n    }\n\n    var parameters = {};\n\n    if (keywords !== undefined && keywords !== null)\n    {\n        if (keywords instanceof Array)\n        {\n            parameters['track'] = keywords.join(',');\n        }\n        else\n        {\n            throw new Error('Expected Array object.');\n        }\n    }\n\n    if (locations !== undefined && locations !== null)\n    {\n        if (locations instanceof Array)\n        {\n            parameters['locations'] = locations.join(',');\n        }\n        else\n        {\n            throw new Error('Expected Array object.');\n        }\n    }\n\n    if (users !== undefined && users !== null)\n    {\n        if (users instanceof Array)\n        {\n            parameters['follow'] = users.join(',');\n        }\n        else\n        {\n            throw new Error('Expected Array object.');\n        }\n    }\n\n    if (count !== undefined && count !== null)\n    {\n        if (isNaN(count) === false)\n        {\n            parameters['count'] = count;\n        }\n        else\n        {\n            throw new Error('Expected integer.');\n        }\n    }\n\n    // if no parameter is given, connect to the sample stream (aka. \"spritzer\")\n    if (!keywords && !locations && !users && !count) {\n      this._createGetRequest('statuses/sample', 'json', parameters);\n    // else connect to the filter stream\n    } else {\n      this._createPostRequest('statuses/filter', 'json', parameters);\n    }\n    if(callback && typeof callback === 'function')\n    {\n        callback(null, \"tweet\");\n    }\n};\n\n/**\n * Disconnects from the Twitter Streaming API.\n *\n * @this {StreamClient}\n */\nStreamClient.prototype.stop = function(callback)\n{\n    var self = this;\n\n    for (var key in this._connections)\n    {\n        var connection = this._connectionForKey(key);\n        if (connection === undefined)\n        {\n            delete self._connections[key];\n        }\n\n        connection.httpRequest.req.abort();\n    }\n    if(callback && typeof callback === 'function')\n    {\n        // wait before calling back to make sure aborts finish\n        var waitUntilStopped = function(){\n            if(self.isRunning())\n            {\n                setTimeout(waitUntilStopped, 100);\n            }\n            else\n            {\n                callback(null, \"tweet\");\n            }\n        };\n        waitUntilStopped();\n    }\n};\n\n/**\n * Handles the ending of a request.\n *\n * @private\n * @this {StreamClient}\n * @param {http.ClientRequest} aRequest The request object.\n */\nStreamClient.prototype._requestDidClose = function(aRequest)\n{\n    Client.prototype._requestDidClose.call(this, aRequest);\n\n    this.emit('close');\n};\n\n/**\n * Handles the closing of a request.\n *\n * @private\n * @this {StreamClient}\n * @param {http.ClientRequest} aRequest The request object.\n */\nStreamClient.prototype._requestDidEnd = function(aRequest)\n{\n    Client.prototype._requestDidEnd.call(this, aRequest);\n\n    this.emit('end');\n};\n\n/**\n * Handles the failure of a request.\n *\n * @private\n * @this {StreamClient}\n * @param {http.ClientRequest} aRequest The request object.\n * @param {Error} aError An Error object.\n */\nStreamClient.prototype._requestDidFailWithError = function(aRequest, aError)\n{\n    Client.prototype._requestDidFailWithError.call(this, aRequest, aError);\n\n    this.emit('error', aError);\n};\n\n/**\n * Handles data received from the Twitter stream.\n *\n * @private\n * @this {StreamClient}\n * @param {http.ClientRequest} aRequest The request object.\n * @param {Buffer} aData\n */\nStreamClient.prototype._requestDidReceiveData = function(aRequest, aData)\n{\n    var connection = this._connectionForKey(aRequest.hash);\n    if (connection === undefined) return;\n\n    connection['data'] = connection['data'] + aData.toString('utf8');\n\n    var index = -1;\n    while ((index = connection['data'].indexOf(Constants.StreamApiObjectTerminator)) !== -1)\n    {\n        var jsonString = connection['data'].slice(0, index);\n        connection['data'] = connection['data'].slice(index + Constants.StreamApiObjectTerminator.length);\n\n        // If jsonString has a length of zero continue without emitting any\n        // events.\n        if (jsonString.length === 0) continue;\n\n        var object = undefined;\n        try\n        {\n            object = JSON.parse(jsonString);\n        }\n        catch (e)\n        {\n            // If an error occurs while parsing the JSON string reset object\n            // and emit the error\n            object = undefined;\n            this.emit('error', e);\n        }\n\n        // If object is undefined continue without emitting any events.\n        if (object === undefined) continue;\n\n        if (object.delete !== undefined)\n        {\n            this.emit('deleteTweet', object.delete);\n        }\n        else if (object.scrub_geo !== undefined)\n        {\n            this.emit('deleteLocation', object.scrub_geo);\n        }\n        else if (object.limit !== undefined)\n        {\n            this.emit('limit', object.limit);\n        }\n        else if (object.retweeted_status !== undefined)\n        {\n            this.emit('retweet', object.retweeted_status);\n        }\n        else\n        {\n            this.emit('tweet', object);\n        }\n    }\n};\n\nmodule.exports = StreamClient;\n"}